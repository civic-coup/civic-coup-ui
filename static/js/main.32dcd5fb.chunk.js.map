{"version":3,"sources":["components/AddressForm/AddressForm.js","constants.js","components/AddressForm/index.js","components/CandidateListing/CandidateListing.js","components/CandidateListing/index.js","components/App/App.js","components/App/index.js","index.js"],"names":["autoComplete","CANDIDATE_DATA_URL","AddressForm","onLocatePlace","useState","input","setInput","autoCompleteRef","useRef","url","onLoad","handlerFn","ref","window","google","maps","places","Autocomplete","current","types","componentRestrictions","country","fields","navigator","geolocation","getCurrentPosition","position","circle","Circle","center","lat","coords","latitude","lng","longitude","radius","accuracy","setBounds","getBounds","addListener","address","getPlace","formatted_address","type","placeholder","value","onChange","event","target","gapiOfficeToSearchOffice","CandidateListing","candidateInformation","setCandidateInformation","stateSenatorCandidates","setStateSenatorCandidates","usRepCandidates","setUsRepCandidates","assemblyCandidates","setAssemblyCandidates","ready","setReady","onScriptLoad","a","gapi","load","client","setApiKey","useEffect","fetch","resp","json","data","fetchCandidateInformation","civicinfo","representatives","representativeInfoByAddress","then","response","result","offices","forEach","r","name","searchId","office","divisionId","split","slice","getDistrictNumber","getSearchId","filtered","filter","d","SearchId","length","map","val","idx","CandidateName","Party","Issues","console","log","App","setAddress","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.32dcd5fb.chunk.js","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport Script from \"react-load-script\";\n\nimport \"./AddressForm.css\";\nimport { GOOGLE_PLACES_API_KEY } from \"../../constants\";\n\nlet autoComplete;\n\n// eslint-disable-next-line react/prop-types\nfunction AddressForm({ onLocatePlace }) {\n  const [input, setInput] = useState(\"\");\n  const autoCompleteRef = useRef(null);\n\n  const onScriptLoad = (handlerFn, ref) => {\n    autoComplete = new window.google.maps.places.Autocomplete(ref.current, {\n      types: [\"geocode\"],\n      componentRestrictions: { country: \"us\" },\n      fields: [\"formatted_address\"],\n    });\n\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        const circle = new window.google.maps.Circle({\n          center: {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude,\n          },\n          radius: position.coords.accuracy,\n        });\n\n        autoComplete.setBounds(circle.getBounds());\n      });\n    }\n\n    autoComplete.addListener(\"place_changed\", () => {\n      const addressObject = autoComplete.getPlace();\n      const address = addressObject.formatted_address;\n      handlerFn(address);\n    });\n  };\n\n  return (\n    <div>\n      <Script\n        url={`https://maps.googleapis.com/maps/api/js?key=${GOOGLE_PLACES_API_KEY}&libraries=places`}\n        onLoad={() => onScriptLoad(onLocatePlace, autoCompleteRef)}\n      />\n      <input\n        type=\"text\"\n        placeholder=\"Enter your address\"\n        ref={autoCompleteRef}\n        value={input}\n        onChange={(event) => setInput(event.target.value)}\n      />\n    </div>\n  );\n}\n\nexport default AddressForm;\n","// Candidate Data URLs\nexport const CANDIDATE_DATA_URL =\n  \"https://civic-coup.github.io/data/candidates/index.json\";\n\n// Google API Information\nexport const GOOGLE_API_SCRIPT_URL = \"https://apis.google.com/js/api.js\";\nexport const GOOGLE_CIVIC_INFO_URL =\n  \"https://content.googleapis.com/discovery/v1/apis/civicinfo/v2/rest\";\nexport const GOOGLE_PLACES_API_KEY = \"AIzaSyAmziDvozHp7yzlPt-Rt6T-SCxqQxVsKv8\";\nexport const GOOGLE_API_KEY = \"AIzaSyCgRnwb1bj2OXkG0ELSPUNq9IZj141FoWk\";\n","import AddressForm from \"./AddressForm\";\n\nexport default AddressForm;\n","import React, { useState, useEffect } from \"react\";\nimport Script from \"react-load-script\";\n\nimport \"./CandidateListing.css\";\nimport {\n  CANDIDATE_DATA_URL,\n  GOOGLE_API_KEY,\n  GOOGLE_API_SCRIPT_URL,\n  GOOGLE_CIVIC_INFO_URL,\n} from \"../../constants\";\n\nconst gapiOfficeToSearchOffice = {\n  \"NY State Senator\": \"state-senator\",\n  \"NY State Assemblymember\": \"assembly-member\",\n  \"U.S. Representative\": \"us-representative\",\n};\n\nfunction getDistrictNumber(divisionId) {\n  return divisionId.split(\":\").slice(-1)[0];\n}\n\nfunction getSearchId(office, divisionId) {\n  return `${gapiOfficeToSearchOffice[office]}-${getDistrictNumber(divisionId)}`;\n}\n\n// eslint-disable-next-line react/prop-types\nfunction CandidateListing({ address }) {\n  const [candidateInformation, setCandidateInformation] = useState([]);\n  const [stateSenatorCandidates, setStateSenatorCandidates] = useState([]);\n  const [usRepCandidates, setUsRepCandidates] = useState([]);\n  const [assemblyCandidates, setAssemblyCandidates] = useState([]);\n  const [ready, setReady] = useState(false);\n\n  const onScriptLoad = async () => {\n    await window.gapi.load(\"client\", async () => {\n      await window.gapi.client.setApiKey(GOOGLE_API_KEY);\n      await window.gapi.client.load(GOOGLE_CIVIC_INFO_URL);\n      setReady(true);\n    });\n  };\n\n  useEffect(() => {\n    async function fetchCandidateInformation() {\n      const resp = await fetch(CANDIDATE_DATA_URL);\n      const data = await resp.json();\n      setCandidateInformation(data);\n    }\n    fetchCandidateInformation();\n  }, []);\n\n  useEffect(() => {\n    function fetchElectionCandidates() {\n      window.gapi.client.civicinfo.representatives\n        .representativeInfoByAddress({ address })\n        .then((response) => {\n          const { result } = response;\n          result.offices.forEach((r) => {\n            const { name, divisionId } = r;\n            const searchId = getSearchId(name, divisionId);\n            const filtered = candidateInformation.filter(\n              (d) => d.SearchId === searchId\n            );\n\n            if (name === \"NY State Senator\") {\n              setStateSenatorCandidates(filtered);\n            } else if (name === \"U.S. Representative\") {\n              setUsRepCandidates(filtered);\n            } else if (name === \"NY State Assemblymember\") {\n              setAssemblyCandidates(filtered);\n            }\n          });\n        });\n    }\n\n    if (ready) {\n      fetchElectionCandidates();\n    }\n  }, [address, candidateInformation, ready]);\n\n  return (\n    <div>\n      <Script url={GOOGLE_API_SCRIPT_URL} onLoad={onScriptLoad} />\n      {address && (\n        <div>\n          <p>{address}</p>\n        </div>\n      )}\n      {usRepCandidates && usRepCandidates.length > 0 ? (\n        <div>\n          <hr />\n          <p>US Representatives:</p>\n          <ul>\n            {usRepCandidates.map((val, idx) => {\n              const { CandidateName, Party, Issues } = val;\n              return (\n                // eslint-disable-next-line react/no-array-index-key\n                <li key={idx}>{`${CandidateName} (${Party}) - ${Issues}`}</li>\n              );\n            })}\n          </ul>\n        </div>\n      ) : null}\n      {stateSenatorCandidates && stateSenatorCandidates.length > 0 ? (\n        <div>\n          <hr />\n          <p>State Senators:</p>\n          <ul>\n            {stateSenatorCandidates.map((val, idx) => {\n              const { CandidateName, Party, Issues } = val;\n              return (\n                // eslint-disable-next-line react/no-array-index-key\n                <li key={idx}>{`${CandidateName} (${Party}) - ${Issues}`}</li>\n              );\n            })}\n          </ul>\n        </div>\n      ) : null}\n      {assemblyCandidates && assemblyCandidates.length > 0 ? (\n        <div>\n          <hr />\n          <p>State Assembly:</p>\n          <ul>\n            {assemblyCandidates.map((val, idx) => {\n              const { CandidateName, Party, Issues } = val;\n              console.log(CandidateName);\n              console.log(Party);\n              console.log(Issues);\n              return (\n                // eslint-disable-next-line react/no-array-index-key\n                <li key={idx}>{`${CandidateName} (${Party}) - ${Issues}`}</li>\n              );\n            })}\n          </ul>\n        </div>\n      ) : null}\n    </div>\n  );\n}\n\nexport default CandidateListing;\n","import CandidateListing from \"./CandidateListing\";\n\nexport default CandidateListing;\n","import React, { useState } from \"react\";\n\nimport \"./App.css\";\nimport AddressForm from \"../AddressForm\";\nimport CandidateListing from \"../CandidateListing\";\n\nfunction App() {\n  const [address, setAddress] = useState(\"\");\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {address ? (\n          <CandidateListing address={address} />\n        ) : (\n          <AddressForm onLocatePlace={(input) => setAddress(input)} />\n        )}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import App from \"./App\";\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}